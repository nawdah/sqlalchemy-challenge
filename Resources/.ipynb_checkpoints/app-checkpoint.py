{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import datetime as dt\n",
    "\n",
    "import sqlalchemy\n",
    "from sqlalchemy.ext.automap import automap_base\n",
    "from sqlalchemy.orm import Session\n",
    "from sqlalchemy import create_engine, func\n",
    "\n",
    "from flask import Flask, jsonify\n",
    "\n",
    "\n",
    "engine = create_engine(\"sqlite:///hawaii.sqlite\")\n",
    "Base = automap_base()\n",
    "Base.prepare(engine, reflect=True)\n",
    "\n",
    "\n",
    "Measurement = Base.classes.measurement\n",
    "Station = Base.classes.station\n",
    "\n",
    "\n",
    "@app.route(\"/\")\n",
    "def home():\n",
    "    return (\n",
    "        f\"Available Routes:<br/>\"\n",
    "        \"-------------------------\"\n",
    "        f\"Precipitation: /api/v1.0/precipitation<br/>\"\n",
    "        f\"List of Stations: /api/v1.0/stations<br/>\"\n",
    "        f\"Temperature Observation for the previous year: /api/v1.0/tobs<br/>\"\n",
    "        f\"Temperature stat from the start date(yyyy-mm-dd): /api/v1.0/yyyy-mm-dd<br/>\"\n",
    "        f\"Temperature stat from start to end dates(yyyy-mm-dd): /api/v1.0/yyyy-mm-dd/yyyy-mm-dd\"\n",
    "    )\n",
    "\n",
    "@app.route('/api/v1.0/precipitation')\n",
    "def precipitation():\n",
    "    session = Session(engine)\n",
    "    sel = [Measurement.date, Measurement.prcp]\n",
    "    \n",
    "    results = session.query(*sel).all()\n",
    "    session.close()\n",
    "\n",
    "    precipitation = []\n",
    "    for date, prcp in result:\n",
    "        prcp_dict = {}\n",
    "        prcp_dict[\"Date\"] = date\n",
    "        prcp_dict[\"Precipitation\"] = prcp\n",
    "        precipitation.append(prcp_dict)\n",
    "\n",
    "    return jsonify(precipitation)\n",
    "\n",
    "@app.route('/api/v1.0/stations')\n",
    "def stations():\n",
    "    session = Session(engine)\n",
    "    sel = [Station.station,Station.name,Station.latitude,Station.longitude,Station.elevation]\n",
    "    queryresult = session.query(*sel).all()\n",
    "    session.close()\n",
    "\n",
    "    stations = []\n",
    "    for station, name, latitude, longitude, elevation in queryresult:\n",
    "        station_dict = {}\n",
    "        station_dict[\"Station\"] = station\n",
    "        station_dict[\"Name\"] = name\n",
    "        station_dict[\"Latitude\"] = latitude\n",
    "        station_dict[\"Longitude\"] = longitude\n",
    "        station_dict[\"Elevation\"] = elevation\n",
    "        stations.append(station_dict)\n",
    "\n",
    "    return jsonify(stations)\n",
    "\n",
    "@app.route('/api/v1.0/tobs')\n",
    "def tobs():\n",
    "    session = Session(engine)\n",
    "    \n",
    "    last_date = session.query(Measurement.date).order_by(Measurement.date.desc()).first()[0]\n",
    "    recent = dt.datetime.strptime(last_date, '%Y-%m-%d')\n",
    "    qdate = dt.date(latestdate.year -1, latestdate.month, latestdate.day)\n",
    "    \n",
    "    sel = [Measurement.date,Measurement.tobs]\n",
    "    result = session.query(*sel).filter(Measurement.date >= qdate).all()\n",
    "    session.close()\n",
    "\n",
    "    tobs_list = []\n",
    "    \n",
    "    for date, tobs in result:\n",
    "        tobs_dict = {}\n",
    "        tobs_dict[\"Date\"] = date\n",
    "        tobs_dict[\"Tobs\"] = tobs\n",
    "        tobs_list.append(tobs_dict)\n",
    "\n",
    "    return jsonify(tobs_list)\n",
    "\n",
    "@app.route('/api/v1.0/<start>')\n",
    "def start(start):\n",
    "    session = Session(engine)\n",
    "    \n",
    "    result = session.query(func.min(Measurement.tobs), func.avg(Measurement.tobs), func.max(Measurement.tobs)).\\\n",
    "        filter(Measurement.date >= start).all()\n",
    "    session.close()\n",
    "\n",
    "    tobs_list = []\n",
    "    for min,avg,max in result:\n",
    "        tobs_dict = {}\n",
    "        tobs_dict[\"Min\"] = min\n",
    "        tobs_dict[\"Average\"] = avg\n",
    "        tobs_dict[\"Max\"] = max\n",
    "        tobs_list.append(tobs_dict)\n",
    "\n",
    "    return jsonify(tobs_list)\n",
    "\n",
    "@app.route('/api/v1.0/<start>/<stop>')\n",
    "def stop(start,stop):\n",
    "    session = Session(engine)\n",
    "    queryresult = session.query(func.min(Measurement.tobs), func.avg(Measurement.tobs), func.max(Measurement.tobs)).\\\n",
    "        filter(Measurement.date >= start).filter(Measurement.date <= stop).all()\n",
    "    session.close()\n",
    "\n",
    "    tobs_list = []\n",
    "    for min, avg, max in result:\n",
    "        tobs_dict = {}\n",
    "        tobs_dict[\"Min\"] = min\n",
    "        tobs_dict[\"Average\"] = avg\n",
    "        tobs_dict[\"Max\"] = max\n",
    "        tobs_list.append(tobs_dict)\n",
    "\n",
    "    return jsonify(tobs_list)\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run(debug=True)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
